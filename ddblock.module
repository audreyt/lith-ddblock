<?php
// $Id$

/**
 * @file
 * Enables your site to display dynamic content in a block.
 */

/**
 * Implementation of hook_help().
 */
function ddblock_help($path, $arg) {
  switch ($path) {
    case "admin/help#ddblock":
      $output = '<p>'. t('Display content dynamically in a block using the jQuery Cycle plugin and the jQuery Easing plugin') .'</p>';
      $output .='<p>'. t('There are three methods to provide content for a dynamic display block. An input folder with images, a node from a content type or by making an instance of any block to use the block content of the original block as content for the dynamic display block') .'</p>';
      return $output;
  }
}

/**
 * Implementation of hook_menu().
 */
function ddblock_menu() {

  // add ddblock
  $items['admin/settings/ddblock'] = array(
    'title' => t('Dynamic display block'),
    'description' => t('Configure settings for dynamic display block module.'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ddblock_block_add_form'),
    'access arguments' => array('administer dynamic display blocks'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'ddblock.admin.inc',
  );

  // list tab in settings page.
  $items['admin/settings/ddblock/list'] = array(
    'title' => t('List'),
    'page arguments' => array('ddblock_block_add_form'),
    'access arguments' => array('administer dynamic display blocks'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );

  // Settings tab in settings page.
  $items['admin/settings/ddblock/settings'] = array(
    'title' => t('Settings'),
    'page arguments' => array('ddblock_settings_form'),
    'access arguments' => array('administer dynamic display blocks'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 10,
    'file' => 'ddblock.admin.inc',
  );

  // Edit dynamic display block.
  $items['admin/settings/ddblock/edit/%'] = array(
    'title' => t('Edit dynamic display block'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ddblock_block_edit_form', 4),
    'access arguments' => array('administer dynamic display blocks'),
    'type' => MENU_CALLBACK,
    'file' => 'ddblock.admin.inc',
  );

  // Delete dynamic display block or instance.
  $items['admin/settings/ddblock/delete/%'] = array(
    'title' => t('Delete dynamic display block'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ddblock_block_confirm_delete_form', 4),
    'access arguments' => array('administer dynamic display blocks'),
    'type' => MENU_CALLBACK,
    'file' => 'ddblock.admin.inc',
  );

  // Add ddblock instance.
  $items['admin/settings/ddblock/instances'] = array(
    'title' => t('Instances'),
    'description' => t('Create and delete instances of blocks.'),
    'page callback' =>  'ddblock_instances',
    'access callback' => 'user_access',
    'access arguments' => array('administer blocks'),
    'type' => MENU_LOCAL_TASK,
    'weight' => -1,
  );

  // Ahah update nodes to choose of content type.
  $items['ddblock/js/select_nodes'] = array(
    'page callback' => 'ddblock_select_nodes_js',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  // Ahah update width and height of a pager.
  $items['ddblock/js/pager_dimensions'] = array(
    'page callback' => 'ddblock_pager_dimensions_js',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implementation of hook_perm().
 */
function ddblock_perm() {
  return array('administer dynamic display blocks', 'view dynamic display blocks');
}

/**
 * Implementation of hook_block().
 */
function ddblock_block($op='list', $delta=0, $edit = array()) {
  switch ($op) {
    // show info in block list on block administration page.
    case 'list':
      $blocks = ddblock_get_blocks(NULL);
      $list = array();
      foreach ($blocks as $block) {
        $list[$block->delta] = array('info' => check_plain($block->title));
      }
      return $list;

    // the configuration page of the block.
    case 'configure':
      // if block is a ddblock instance invoke configure option of original block.
      // with form_alter the ddblock settings are added.
      $block = ddblock_get_blocks($delta);
      if ($block->enabled) {
        $module = $block->module;
        $delta_original = $block->delta_original;
        return module_invoke($module, 'block', $op, $delta_original);
      }

      // if block is a ddblock invoke the block configure page.
      return ddblock_block_configure($delta);

    // save configuraton settings.
    case 'save':
      //all blocks are instances of ddblock.
      $module = 'ddblock';
      ddblock_set_configuration_settings($module, $delta, $edit);
      return;

    // show block content (this is set to default).
    case 'view': default:
      //all blocks are instances of ddblock.
      $module = 'ddblock';

      if (user_access('view dynamic display blocks')) {
        $block['subject'] = ddblock_subject($module, $delta);
        $block['content'] = ddblock_content($module, $delta);
        return $block;
      }
      break;
  }
}

/**
 * Return all or one dynamic display block.
 *
 * @param $delta
 *   Optional. Retreive a single block based on this delta. If none specified,
 *   all blocks are returned.
 * @param $reset
 *   Optional. Boolean value to reset the interal cache of this function.
 * @return
 *   array of dynamic display blocks.
 */
function ddblock_get_blocks($delta = NULL, $reset = FALSE) {
  static $blocks;

  if (!isset($blocks) || $reset) {
    $blocks = array();
    $result = db_query("SELECT * FROM {ddblock_block}");
    while ($block = db_fetch_object($result)) {
      $blocks[$block->delta] = $block;
    }
  }

  return is_numeric($delta) ? $blocks[$delta] : $blocks;
}

/**
 * Block configuration page of dynamic display block blocks added to standard block configuration page.
 *
 * @param $delta
 *   Blocknumber of the block.
 *
 * @return
 *   form with configuration settings.
 */
function ddblock_block_configure($delta) {

  // get saved or default configuration settings.
  $configuration_settings = ddblock_get_configuration_settings('ddblock', $delta);
  $folder = _ddblock_get_variable($configuration_settings['folder'], 'files/images/ddblock');
  $max_image = _ddblock_get_variable($configuration_settings['max_image'], 2);
  $image_height = _ddblock_get_variable($configuration_settings['image_height'], 183);
  $image_width = _ddblock_get_variable($configuration_settings['image_width'], 183);
  $input_type = _ddblock_get_variable($configuration_settings['input_type'], 'images');
  $content_type = _ddblock_get_variable($configuration_settings['content_type'], 'none');
  $nodes = _ddblock_get_variable($configuration_settings['nodes'], '');
  $container = _ddblock_get_variable($configuration_settings['container'], 'img');
  $height = _ddblock_get_variable($configuration_settings['height'], 195);
  $width = _ddblock_get_variable($configuration_settings['width'], 195);
  $fx = _ddblock_get_variable($configuration_settings['fx'], "fade");
  $speed = _ddblock_get_variable($configuration_settings['speed'], 1000);
  $timeout = _ddblock_get_variable($configuration_settings['timeout'], 3000);
  $order = _ddblock_get_variable($configuration_settings['order'], 'random');
  $pause = _ddblock_get_variable($configuration_settings['pause'], 1);
  $next = _ddblock_get_variable($configuration_settings['next'], 1);
  $pager = _ddblock_get_variable($configuration_settings['pager'], 'none');
  if ($pager == 'number-pager') {
    $pager_height = _ddblock_get_variable($configuration_settings['pager_height'], 25);
    $pager_width = _ddblock_get_variable($configuration_settings['pager_width'], 195);
  }
  else {
    $pager_height = _ddblock_get_variable($configuration_settings['pager_height'], 63);
    $pager_width = _ddblock_get_variable($configuration_settings['pager_width'], 195);
  }

  $custom = _ddblock_get_variable($configuration_settings['settings'], '');

  // Need this for AJAX.
  $form['#cache'] = TRUE;

  // content settings: what to use as content for the dynamic display block.
  $form['content'] = array(
    '#type' => 'fieldset',
    '#collapsible' => TRUE,
    '#title' => t('Content settings'),
    '#weight' => -3,
  );

  $options = array('images' => t('Image folder'), 'nodes' => t('Content type'));
  $form['content']['input_type'] = array(
    '#type' => 'select',
    '#title' => t('Input type'),
    '#default_value' => $input_type,
    '#options' => $options,
    '#multiple' => FALSE,
    '#required' => TRUE,
    '#description' => t("Input of the dynamic display block."),
    '#weight' => -7,

  );

  // image folder settings.
  $form['content']['image_folder'] = array(
    '#type' => 'fieldset',
    '#collapsible' => TRUE,
    '#title' => t('Image folder settings'),
    '#weight' => -6,
  );

  $form['content']['image_folder']['folder'] = array(
    '#type' => 'textfield',
    '#title' => t('Image Folder'),
    '#default_value' => $folder,
    '#size' => 25,
    '#maxlength' => 100,
    '#required' => FALSE,
    '#description' => t("The folder containing image files to be used as the content of dynamic display block. Use a relative path. Use a relative path, like <strong>files/images/ddblock</strong>."),
  );

    $form['content']['image_folder']['max_image'] = array(
    '#type' => 'textfield',
    '#title' => t('Number of images'),
    '#default_value' => $max_image,
    '#required' => FALSE,
    '#description' => t("The number of images to show in the block."),
  );

  // content type settings.
  $form['content']['content_types'] = array(
    '#type' => 'fieldset',
    '#collapsible' => TRUE,
    '#title' => t('Content type settings'),
    '#weight' => -5,
  );

  //get possible content types from settings.
  $node_types = variable_get('ddblock_node_type', array());
  foreach ($node_types as $key => $value ) {
    if ($value) {
      $content_types[$key] = $value;
    }
  }

  // add a none option to the content types to choose from.
  $content_types['none'] = t("None");

  $form['content']['content_types']['content_type'] = array(
    '#type' => 'select',
    '#title' => t('Content Type'),
    '#default_value' => $content_type,
    '#options' => $content_types,
    '#description' => t("The nodes of the content type to be used as content of dynamic display block."),
    '#attributes' => array('class' => 'content-type-select'),
    '#ahah' => array(
      'path' => 'ddblock/js/select_nodes',
      'wrapper' => 'select-nodes-wrapper',
      'effect' => 'slide',
    ),
  );

  ddblock_select_nodes_form($form, $content_type, $nodes);

  // content container settings.
  $form['content']['content_container'] = array(
    '#type' => 'fieldset',
    '#collapsible' => TRUE,
    '#title' => t('Content container settings'),
    '#weight' => -4,
  );

  $form['content']['content_container']['container'] = array(
    '#type' => 'textfield',
    '#title' => t('Content container'),
    '#default_value' => $container,
    '#required' => FALSE,
    '#description' => t("Container of the content to show, eg. img, to show images."),
  );

  $form['content']['content_container']['height'] = array(
    '#type' => 'textfield',
    '#title' => t('Height'),
    '#default_value' => $height,
    '#required' => FALSE,
    '#description' => t("Height of the content to show"),
  );

  $form['content']['content_container']['width'] = array(
    '#type' => 'textfield',
    '#title' => t('Width'),
    '#default_value' => $width,
    '#required' => FALSE,
    '#description' => t("Width of the content to show"),
  );

  // Image settings.
  $form['content']['images'] = array(
    '#type' => 'fieldset',
    '#collapsible' => TRUE,
    '#title' => t('Image settings'),
    '#weight' => -3,
  );
  $form['content']['images']['image_height'] = array(
    '#type' => 'textfield',
    '#title' => t('Height'),
    '#default_value' => $image_height,
    '#required' => FALSE,
    '#description' => t("Height of the image to show"),
  );

  $form['content']['images']['image_width'] = array(
    '#type' => 'textfield',
    '#title' => t('Width'),
    '#default_value' => $image_width,
    '#required' => FALSE,
    '#description' => t("Width of the image to show"),
  );

  $form['block_settings']['settings'] = array(
    '#type' => 'fieldset',
    '#collapsible' => TRUE,
    '#title' => t('Settings'),
    '#weight' => -2,
  );

  $options =_ddblock_get_effects();
  $form['block_settings']['settings']['fx'] = array(
    '#type' => 'select',
    '#title' => t('Transition Effect'),
    '#default_value' => $fx,
    '#options' => $options,
    '#multiple' => FALSE,
    '#required' => TRUE,
    '#description' => t("The transition effect between content."),
  );

  $options = drupal_map_assoc(array(250, 500, 1000, 2000, 3000, 4000, 5000, 6000, 7000, 8000, 9000, 10000));

  $form['block_settings']['settings']['speed'] = array(
    '#type' => 'select',
    '#title' => t('Speed'),
    '#default_value' => $speed,
    '#options' => $options,
    '#required' => TRUE,
    '#description' => t("Speed of the transitions (1000 = 1 second)."),
  );

  $options = drupal_map_assoc(array(0, 250, 500, 1000, 2000, 3000, 4000, 5000, 6000, 7000, 8000, 9000, 10000));
  $form['block_settings']['settings']['timeout'] = array(
    '#type' => 'select',
    '#title' => t('Timeout'),
    '#default_value' => $timeout,
    '#options' => $options,
    '#required' => TRUE,
    '#description' => t("The time (in milliseconds) between transitions (1000 = 1 second, 0 to disable auto advance)."),
  );

  $options = array('random' => t('Random'), 'asc' => t('Ascending'), 'desc' => t('Descending'));
  $form['block_settings']['settings']['order'] = array(
    '#type' => 'radios',
    '#title' => t('Sort Order'),
    '#default_value' => $order,
    '#options' => $options,
    '#multiple' => FALSE,
    '#required' => TRUE,
    '#description' => t("The display order of the content."),
  );

  $form['block_settings']['settings']['pause'] = array(
    '#type' => 'checkbox',
    '#title' => t('Pause'),
    '#default_value' => $pause,
    '#description' => t("Enable users to pause the cycle by hovering on the content."),
  );

  $form['block_settings']['settings']['next'] = array(
    '#type' => 'checkbox',
    '#title' => t('Next'),
    '#default_value' => $next,
    '#description' => t("Enable users to advanced to the next content by clicking on the content."),
  );

  if ($input_type == 'images') {
    $options = array(
      'none' => t('None'),
      'number-pager' => t('Number Pager'),
      'image-pager' => t('Image pager'),
    );
  }
  else {
    $options = array(
      'none' => t('None'),
      'number-pager' => t('Number Pager'),
    );
  }

  // pager select field.
  $form['block_settings']['settings']['pager'] = array(
    '#type' => 'select',
    '#title' => t('Pager'),
    '#default_value' => $pager,
    '#options' => $options,
    '#required' => TRUE,
    '#description' => t("Add a pager to the block. You can only add a image pager if your images are from an image folder"),
    '#attributes' => array('class' => 'pager-select'),
    '#ahah' => array(
      'path' => 'ddblock/js/pager_dimensions',
      'wrapper' => 'pager-dimensions-wrapper',
      'effect' => 'slide',
    ),
  );

  ddblock_pager_dimensions_form($form, $pager, $pager_height, $pager_width);

  // collapsed or not collapsed depending on value for custom settings.
  if ($custom) {
    $collapsed = FALSE;
  }
  else {
    $collapsed = TRUE;
  }

  $form['custom'] = array(
    '#type' => 'fieldset',
    '#collapsible' => TRUE,
    '#collapsed' => $collapsed,
    '#title' => t('Custom Settings'),
    '#weight' => 1,
    '#description' => t('If you use custom options, the other settings are not used.'),
  );

  $form['custom']['setting'] = array(
    '#type' => 'textarea',
    '#title' => t('Custom Options'),
    '#default_value' => $custom,
    '#cols' => 60,
    '#rows' => 10,
    '#required' => FALSE,
    '#description' => t('Custom options for the cycle plug-in.'),
  );

  $form['#redirect'] = 'admin/settings/ddblock/list';


  return $form;
}

/**
 * Build the node selection form element.
 *
 * This function is also called when generating a new set of options during the
 * AJAX callback, so an array is returned that can be used to replace an existing
 * form element.
 *
 * @param $form
 *   form to add elements to.
 * @param $content_type
 *   selected content type.
 * @param $nodes
 *   Existing nodes added to the block.
 *
 * @return
 *   form fields.
 */
function ddblock_select_nodes_form(&$form, $content_type, $nodes) {

  // Wrapper for nodes select box.
  $form['content']['content_types']['select_nodes'] = array(
    '#type' => 'hidden',
    '#value' => -1,
    '#prefix' => '<div id="select-nodes-wrapper">',
  );
  //   no content type selected (show text 'No content type selected').
  if ($content_type == 'none') {
    $form['content']['content_types']['select_nodes']['#prefix'] .= '<em>'. t('No content type selected.') .'</em>';
    $form['content']['content_types']['select_nodes']['#suffix'] = '</div>';

    unset($form['content']['content_types']['nodes']);

  }
  // add select box to select a node.
  else {
    if (user_access('administer dynamic display blocks')) {

      // get all nodes of a content type which are not added yet to the block.
      $options = _ddblock_get_content_type_nodes($content_type);
      $form['content']['content_types']['nodes'] = array(
        '#type' => 'select',
        '#title' => t('Node'),
        '#default_value' => $nodes,
        '#description' => t('The node to show in the Dynamic display block'),
        '#options' => $options,
        '#attributes' => array('class' => 'content-type-select'),
        '#suffix' => '</div>',
      );
    }
  }

  return $form;
}

/**
 * Build the height field of the pager.
 *
 * This function is also called when generating a new set of options during the
 * AJAX callback, so an array is returned that can be used to replace an existing
 * form element.
 */
function ddblock_pager_dimensions_form(&$form, $pager, $pager_height, $pager_width) {

  // Wrapper for the pager dimensions fields.
  $form['block_settings']['settings']['pager_dimensions'] = array(
    '#type' => 'hidden',
    '#value' => -1,
    '#prefix' => '<div id="pager-dimensions-wrapper">',
      );
  //   no pager selected (show text 'No pager selected').
  if ($pager == 'none') {
    $form['block_settings']['settings']['pager_dimensions']['#prefix'] .= '<em>'. t('No pager selected.') .'</em>';
    unset($form['block_settings']['settings']['pager_height']);
    unset($form['block_settings']['settings']['pager_width']);
  }
  // add pager dimensions fields.
  else {
    $form['block_settings']['settings']['pager_height'] = array(
      '#type' => 'textfield',
      '#title' => t('Height'),
      '#default_value' => $pager_height,
      '#required' => FALSE,
      '#description' => t("Height of the pager"),
      '#attributes' => array('class' => 'pager_select'),
    );
    $form['block_settings']['settings']['pager_width'] = array(
      '#type' => 'textfield',
      '#title' => t('Width'),
      '#default_value' => $pager_width,
      '#required' => FALSE,
      '#description' => t("Width of the pager"),
      '#attributes' => array('class' => 'pager_select'),
      '#suffix' => '</div>',
    );
  }
}

/**
 * Implementation of hook_form_alter().
 *
 * Used to add dynamic display block configuration settings to dynamic display block instances.
 */
function ddblock_form_alter(&$form, &$form_state, $form_id) {
  $module = arg(4);
  $delta = arg(5);

  if ((isset($delta))
    && (user_access('administer dynamic display blocks'))
    && (user_access('administer blocks'))
    && ($form_id == 'block_admin_configure')) {

    // get original block_settings.
    $block = ddblock_get_blocks($delta);
    $module_original = $block->module;
    $delta_original = $block->delta_original;

    // check if module enabled in the dynamic display block settings.
    $block_enabled = FALSE;
    $blocks = ddblock_get_ddblock_enabled_module_blocks();
    foreach ($blocks as $block) {
      if (($block['module'] == $module_original) && ($block['delta'] == $delta_original)) {
        $block_enabled = TRUE;
      }
    }

    if ($block_enabled) {

      // get settings.
      $configuration_settings = ddblock_get_configuration_settings($module, $delta);
      $container = _ddblock_get_variable($configuration_settings['container'], 'img');
      $height = _ddblock_get_variable($configuration_settings['height'], 195);
      $width = _ddblock_get_variable($configuration_settings['width'], 195);
      $image_height = _ddblock_get_variable($configuration_settings['image_height'], 195);
      $image_width = _ddblock_get_variable($configuration_settings['image_width'], 195);
      $fx = _ddblock_get_variable($configuration_settings['fx'], "fade");
      $speed = _ddblock_get_variable($configuration_settings['speed'], 1000);
      $timeout = _ddblock_get_variable($configuration_settings['timeout'], 3000);
      $order = _ddblock_get_variable($configuration_settings['order'], 'random');
      $pause = _ddblock_get_variable($configuration_settings['pause'], 1);
      $next = _ddblock_get_variable($configuration_settings['next'], 1);
      $pager = _ddblock_get_variable($configuration_settings['pager'], 'none');
      if ($pager == 'number-pager') {
        $pager_height = _ddblock_get_variable($configuration_settings['pager_height'], 25);
        $pager_width = _ddblock_get_variable($configuration_settings['pager_width'], 195);
      }
      else {
        $pager_height = _ddblock_get_variable($configuration_settings['pager_height'], 63);
        $pager_width = _ddblock_get_variable($configuration_settings['pager_width'], 195);
      }
      $custom = _ddblock_get_variable($configuration_settings['settings'], '');
      $widget = _ddblock_get_variable($configuration_settings['widget'], 'default');

      $form['module'] = array(
        '#type' => 'hidden',
        '#value' => $module,
      );
      $form['delta'] = array(
        '#type' => 'value',
        '#value' => $delta,
      );
      $form['input_type'] = array(
        '#type' => 'hidden',
        '#value' => 'instance',
      );

      // widget setting: Enable the dynamic display block setting for this block.
      $options = array(
        'default' => t('Default'),
        'cycle' => t('Cycleblock'),
      );
      $form['block_settings']['widget'] = array(
        '#type' => 'radios',
        '#title' => t('Display Method'),
        '#default_value' => $widget,
        '#options' => $options,
        '#required' => TRUE,
        '#description' => t("Choose a way to display content."),
      );

      if ($widget == 'default') {
        $collapsed = TRUE;
      }
      else {
        $collapsed = FALSE;
      }

      // content settings: what to use as content for the dynamic display block.
      $form['block_settings']['settings'] = array(
        '#type' => 'fieldset',
        '#collapsible' => TRUE,
        '#collapsed' => $collapsed,
        '#title' => t('Dynamic display block settings'),
        '#weight' => 1,
      );

      // content container settings.
      $form['block_settings']['settings']['content_container'] = array(
        '#type' => 'fieldset',
        '#collapsible' => TRUE,
        '#collapsed' => FALSE,
        '#title' => t('Content container settings'),
        '#weight' => -4,
      );

      $form['block_settings']['settings']['content_container']['container'] = array(
        '#type' => 'textfield',
        '#title' => t('Content container'),
        '#default_value' => $container,
        '#required' => FALSE,
        '#description' => t("Container of the content to show, eg. img, to show images."),
      );

      $form['block_settings']['settings']['content_container']['height'] = array(
        '#type' => 'textfield',
        '#title' => t('Container height'),
        '#default_value' => $height,
        '#required' => FALSE,
        '#description' => t("Height of the content to show"),
      );

      $form['block_settings']['settings']['content_container']['width'] = array(
        '#type' => 'textfield',
        '#title' => t('Container width'),
        '#default_value' => $width,
        '#required' => FALSE,
        '#description' => t("Width of the content to show"),
      );

      // Image settings.
      $form['block_settings']['settings']['images'] = array(
        '#type' => 'fieldset',
        '#collapsible' => TRUE,
        '#title' => t('Image settings'),
        '#weight' => -3,
      );

      $form['block_settings']['settings']['images']['image_height'] = array(
      '#type' => 'textfield',
      '#title' => t('Image height'),
      '#default_value' => $image_height,
      '#required' => FALSE,
      '#description' => t("Height of the image to show"),
      );

      $form['block_settings']['settings']['images']['image_width'] = array(
      '#type' => 'textfield',
      '#title' => t('Image width'),
      '#default_value' => $image_width,
      '#required' => FALSE,
      '#description' => t("Width of the image to show"),
      );

      $options = _ddblock_get_effects();
      $form['block_settings']['settings']['fx'] = array(
      '#type' => 'select',
      '#title' => t('Transition Effect'),
      '#default_value' => $fx,
      '#options' => $options,
      '#multiple' => FALSE,
      '#required' => TRUE,
      '#description' => t("The transition effect between content."),
      );

      $options = drupal_map_assoc(array(250, 500, 1000, 2000, 3000, 4000, 5000, 6000, 7000, 8000, 9000, 10000));
      $form['block_settings']['settings']['speed'] = array(
      '#type' => 'select',
      '#title' => t('Speed'),
      '#default_value' => $speed,
      '#options' => $options,
      '#required' => TRUE,
      '#description' => t("Speed of the transitions (1000 = 1 second)."),
      );

      $options = drupal_map_assoc(array(0, 250, 500, 1000, 2000, 3000, 4000, 5000, 6000, 7000, 8000, 9000, 10000));
      $form['block_settings']['settings']['timeout'] = array(
      '#type' => 'select',
      '#title' => t('Timeout'),
      '#default_value' => $timeout,
      '#options' => $options,
      '#required' => TRUE,
      '#description' => t("The time (in milliseconds) between transitions (1000 = 1 second, 0 to disable auto advance)."),
      );

      $form['block_settings']['settings']['order'] = array(
      '#type' => 'select',
      '#title' => t('Sort Order'),
      '#default_value' => $random,
      '#options' => array('random' => t('Random'), 'asc' => t('Ascending'), 'desc' => t('Descending')),
      '#multiple' => FALSE,
      '#required' => TRUE,
      '#description' => t("The display order of the content."),
      );

      $form['block_settings']['settings']['pause'] = array(
      '#type' => 'checkbox',
      '#title' => t('Pause'),
      '#default_value' => $pause,
      '#description' => t("Enable users to pause the cycle by hovering on the content."),
      );

      $form['block_settings']['settings']['next'] = array(
      '#type' => 'checkbox',
      '#title' => t('Next'),
      '#default_value' => $next,
      '#description' => t("Enable users to advanced to the next content by clicking on the content."),
      );

      $options = array(
      'none' => t('None'),
      'number-pager' => t('Number Pager'),
      //      'image-pager' => t('Image pager'),
      );
      $form['block_settings']['settings']['pager'] = array(
      '#type' => 'select',
      '#title' => t('Pager'),
      '#default_value' => $pager,
      '#options' => $options,
      '#required' => TRUE,
      '#description' => t("Add a pager to the block."),
      '#attributes' => array('class' => 'pager-select'),
      '#ahah' => array(
      'path' => 'ddblock/js/pager_dimensions',
      'wrapper' => 'pager-dimensions-wrapper',
      'effect' => 'slide',
      ),
      );

      ddblock_pager_dimensions_form($form, $pager, $pager_height, $pager_width);

      if ($custom) {
        $collapsed = FALSE;
      }
      else {
        $collapsed = TRUE;
      }
      $form['block_settings']['settings']['custom'] = array(
      '#type' => 'fieldset',
      '#collapsible' => TRUE,
      '#collapsed' => $collapsed,
      '#title' => t('Custom Settings'),
      '#weight' => 2,
      '#description' => t('If you use custom options, the other settings are not used.'),
      );

      $form['block_settings']['settings']['custom']['setting'] = array(
      '#type' => 'textarea',
      '#title' => t('Custom Options'),
      '#default_value' => $custom,
      '#cols' => 60,
      '#rows' => 10,
      '#required' => FALSE,
      '#description' => t('Custom options for the cycle plug-in.'),
      );

      $form['#redirect'] = 'admin/settings/ddblock/list';

      $form['submit'] = array(
      '#type' => 'submit',
      '#value' => t('Submit'),
      '#submit' => array('ddblock_form_alter_submit'),
      );
    }
  }
}

/**
 * Submit block configuration settings.
 */
function ddblock_form_alter_submit($form, &$form_state) {
  // save the dynamic display block specific settings.
  $delta = $form_state['values']['delta'];
  $module = $form_state['values']['module'];
  ddblock_set_configuration_settings($module, $delta, $form_state['values']);

  // Call the standard submit handler that saves the block settings.
  block_admin_configure_submit($form, $form_state);
}

/**
 * return subject of block.
 *
 * @param $origin
 *   Origin of the block.
 * @param $delta
 *   Blocknumber of the block.
 *
 * @return
 *   string with title of the block.
 *
 */
function ddblock_subject($origin, $delta) {
  return ddblock_get_block_title($origin, $delta);
}

/**
 * Get contents of dynamic display block block.
 */
function ddblock_content($origin, $delta, $content = NULL, $teaser = NULL) {
  // get settings.
  $configuration_settings = ddblock_get_configuration_settings($origin, $delta);
  $widget = _ddblock_get_variable($configuration_settings['widget'], 'default');
  $image_height = _ddblock_get_variable($configuration_settings['image_height'], 183);
  $image_width = _ddblock_get_variable($configuration_settings['image_width'], 183);
  $input_type = _ddblock_get_variable($configuration_settings['input_type'], 'images');
  $content_type = _ddblock_get_variable($configuration_settings['content_type'], 'none');
  $nodes = _ddblock_get_variable($configuration_settings['nodes'], '');
  $container = _ddblock_get_variable($configuration_settings['container'], 'img');
  $height = _ddblock_get_variable($configuration_settings['height'], 195);
  $width = _ddblock_get_variable($configuration_settings['width'], 195);
  $fx = _ddblock_get_variable($configuration_settings['fx'], "fade");
  $speed = _ddblock_get_variable($configuration_settings['speed'], 1000);
  $timeout = _ddblock_get_variable($configuration_settings['timeout'], 3000);
  $order = _ddblock_get_variable($configuration_settings['order'], 'random');
  $pause = _ddblock_get_variable($configuration_settings['pause'], 1);
  $next = _ddblock_get_variable($configuration_settings['next'], 1);
  $pager = _ddblock_get_variable($configuration_settings['pager'], 'none');
  if ($pager == 'number-pager') {
    $pager_height = _ddblock_get_variable($configuration_settings['pager_height'], 25);
    $pager_width = _ddblock_get_variable($configuration_settings['pager_width'], 195);
  }
  else {
    $pager_height = _ddblock_get_variable($configuration_settings['pager_height'], 63);
    $pager_width = _ddblock_get_variable($configuration_settings['pager_width'], 195);
  }
  $image_container_height = $image_height+12;
  $image_container_width = $image_width+12;
  $custom = _ddblock_get_variable($configuration_settings['settings'], '');

  // Set image container height and width.
  $script = "Drupal.behaviors.ddblock". $origin . $delta ."content = function (context) {\n";
  $script .= "$('#ddblock-". $origin ."-". $delta ." .ddblock-content:not(.ddblock-processed)', context)\n";
  $script .= ".css('height','". $image_container_height ."px')\n";
  $script .= ".css('width','". $image_container_width ."px')\n";
  $script .= ".addClass('ddblock-processed')\n";
  $script .= " };\n";

  //Set image height and width.
  $script .= "Drupal.behaviors.ddblock". $origin . $delta ."img = function (context) {\n";
  $script .= "$('#ddblock-". $origin ."-". $delta ." .". $origin ."-content img:not(.ddblock-processed)', context)\n";
  $script .= ".css('height','". $image_height ."px')\n";
  $script .= ".css('width','". $image_width ."px')\n";
  $script .= ".addClass('ddblock-processed')\n";
  $script .= " };\n";

  // make jQuery cycle behavior.
  $script .= "Drupal.behaviors.ddblock". $origin . $delta ." = function (context) {\n";
  $script .= "$('#ddblock-". $origin ."-". $delta .":not(.ddblock-processed)', context)\n";
  $script .= ".cycle({ \n";
  if (!empty($custom)) {
    $script .= "fx: '". $fx ."'\n";
    if ($pager <> 'none') {
      $script .= ", pager: '#ddblock-". $origin ."-". $pager ."-". $delta ."-nav'\n";
    }
    if ($pager == 'image-pager') {
      $script .= ", pagerAnchorBuilder: function(idx, slide) {\n";
      $script .= "// return sel string for existing anchor\n";
      $script .= "return '#ddblock-". $origin ."-". $pager ."-". $delta ."-nav li:eq(' + (idx) + ') a';\n";
      $script .= "}\n";
    }
    if (!empty($container)) {
      $script .= ", slideExpr: '". $container ."'\n";
    }
    $script .= ", delay: -4000 \n";
    $script .= ',';
    $script .= $custom;
//    $pager = 0;
  }
  else {
    $script .= "fx: '". $fx ."'\n";
    $script .= ", speed: ". $speed ."\n";
    $script .= ", timeout: ". $timeout ."\n";
    if (!empty($pause)) {
      $script .= ", pause: ". $pause ."\n";
    }
    if (!empty($next)) {
      $script .= ", next: '#ddblock-". $origin ."-". $delta ."'\n";
    }
    if ($pager <> 'none') {
      $script .= ", pager: '#ddblock-". $origin ."-". $pager ."-". $delta ."-nav'\n";
    }
    if ($pager == 'image-pager') {
      $script .= ", pagerAnchorBuilder: function(idx, slide) {\n";
      $script .= "// return sel string for existing anchor\n";
      $script .= "return '#ddblock-". $origin ."-". $pager ."-". $delta ."-nav li:eq(' + (idx) + ') a';\n";
      $script .= "}\n";
    }
    if (!empty($container)) {
      $script .= ", slideExpr: '". $container ."'\n";
    }
    $script .= ", delay: -4000 \n";
  }
  $script .= " })\n";
  $script .= ".css('height','". $height ."px')\n";
  $script .= ".css('width','". $width ."px')\n";
  $script .= ".addClass('ddblock-processed')\n";
  $script .= " };\n";

  // get original block settings.
  $ddblock = ddblock_get_blocks($delta);
  $delta_original = $ddblock->delta_original;
  $module_original = $ddblock->module;
  $ddblock_enabled = $ddblock->enabled;

  if ($ddblock_enabled) {
    // get content.
    $block = module_invoke($module_original, 'block', 'view', $delta_original);
    $content = $block['content'];

    if ($widget <> 'default') {
      $block_content = theme(
        'ddblock_block_content',
        $script,
        $pager,
        $pager_height,
        $pager_width,
        $delta,
        $origin,
        $content
      );
    }
    else {
      $block_content = $content;
    }
  }
  else {
    if ($input_type <> 'images') {
      $content_array = _ddblock_get_content_array($content_type, $nodes);

      $block_content = theme(
        'ddblock_block_content_array',
        $script,
        $pager,
        $pager_height,
        $pager_width,
        $delta,
        $origin,
        $content_array
      );
    }
    else {
      // get images.
      $imagepath = check_plain(_ddblock_get_variable($configuration_settings['folder'],
                               'files/images/ddblock'))
      ;
      $max_image = _ddblock_get_variable($configuration_settings['max_image'], 2);

      $content_array = _ddblock_get_image_array($imagepath, $order, $max_image);
      $block_content = theme(
        'ddblock_block_images',
        $script,
        $pager,
        $pager_height,
        $pager_width,
        $delta,
        $origin,
        $content_array);
    }
  }
  return $block_content;
}

// THEME FUNCTIONS.
/**
 * Implementation of hook_theme().
 */
function ddblock_theme() {
  return array(
    'ddblock_block_content' => array(
      'template' => 'ddblock-block-content',
      'arguments' => array(
        'script' => NULL,
        'pager' => NULL,
        'pager_height' => NULL,
        'pager_width' => NULL,
        'delta' => NULL,
        'origin' => NULL,
        'content' => NULL,
      ),
    ),
    'ddblock_block_images' => array(
      'template' => 'ddblock-block-images',
      'arguments' => array(
        'script' => NULL,
        'pager' => NULL,
        'pager_height' => NULL,
        'pager_width' => NULL,
        'delta' => NULL,
        'origin' => NULL,
        'content_array' => NULL,
      ),
    ),
    'ddblock_block_content_array' => array(
      'template' => 'ddblock-block-content-array',
      'arguments' => array(
        'script' => NULL,
        'pager' => NULL,
        'pager_height' => NULL,
        'pager_width' => NULL,
        'delta' => NULL,
        'origin' => NULL,
        'content_array' => NULL,
      ),
    ),
    'ddblock_add_instance' => array(
      'arguments' => array(
        'add_block_form' => NULL,
        'ddblock_instances' => NULL,
      ),
    ),
  );
}

// HELPER FUNCTIONS.
/**
 * Get the configuration settings of a block.
 *
 * @param $origin
 *   Origin of the block.
 * @param $delta
 *   Blocknumber of the block.
 * @return
 *   An associative array containing the configuration settings of the block.
 */
function ddblock_get_configuration_settings($origin, $delta) {
  $configuration_settings = unserialize(variable_get('ddblock_block_'. $origin ."_". $delta .'_cycle_settings', ''));
  return $configuration_settings;
}

/**
 * Set the configuration settings of a block.
 *
 * @param $origin
 *   Origin of the block.
 * @param $delta
 *   Blocknumber of the block.
 * @param $edit
 *   An associative array containing the configuration settings of the block.
 *
 * @return
 *   none.
 */
function ddblock_set_configuration_settings($origin, $delta, $edit) {
  // to prevent setting invalid numbers, number fields are tranformed to integers (non number values will become 0).
  $configuration_settings = array();
  $configuration_settings['folder'] = $edit['folder'];
  $configuration_settings['max_image'] = (int) $edit['max_image'];
  $configuration_settings['input_type'] = $edit['input_type'];
  $configuration_settings['content_type'] = $edit['content_type'];
  $configuration_settings['nodes'] = $edit['nodes'];
  $configuration_settings['widget'] = $edit['widget'];
  $configuration_settings['container'] = $edit['container'];
  $configuration_settings['height'] = (int) $edit['height'];
  $configuration_settings['width'] = (int) $edit['width'];
  $configuration_settings['image_height'] = (int) $edit['image_height'];
  $configuration_settings['image_width'] = (int) $edit['image_width'];
  $configuration_settings['fx'] = $edit['fx'];
  $configuration_settings['speed'] = (int) $edit['speed'];
  $configuration_settings['timeout'] = (int) $edit['timeout'];
  $configuration_settings['order'] = $edit['order'];
  $configuration_settings['pause'] = (int) $edit['pause'];
  $configuration_settings['next'] = (int) $edit['next'];
  $configuration_settings['pager'] = $edit['pager'];
  $configuration_settings['pager_height'] = (int) $edit['pager_height'];
  $configuration_settings['pager_width'] = (int) $edit['pager_width'];
  $configuration_settings['settings'] = $edit['setting'];
  $configuration_settings['origin'] = $origin;

  // set pager to number_pager if input type is not images and image pager.
  if (($configuration_settings['input_type'] <> 'images') &&
      ($configuration_settings['pager'] == 'image-pager')) {
    $configuration_settings['pager'] = 'number-pager';
  }

  variable_set('ddblock_block_'. $origin .'_'. $delta .'_cycle_settings', serialize($configuration_settings));
}

/**
 * Return a persistent variable.
 *
 * @param $name
 *   The name of the variable to return.
 * @param $default
 *   The default value to use if this variable has never been set.
 * @return
 *   The value of the variable.
 */
function _ddblock_get_variable($name, $default) {
  return isset($name) ? $name : $default;
}

/**
 * Return available effect for the dynamic display block.
 *
 * @return
 *   An associative array containing the available effect for the dynamic display block.
 */
function _ddblock_get_effects() {
  // effects.
  $_fx = array(
    'blindX' => t('BlindX'),
    'blindY' => t('BlindY'),
    'blindZ' => t('BlindZ'),
    'cover' => t('Cover'),
    'curtainX' => t('CurtainX'),
    'curtainY' => t('CurtainY'),
    'fade' => t('Fade'),
    'fadeZoom' => t('FadeZoom'),
    'growX' => t('GrowX'),
    'growY' => t('GrowY'),
    'scrollUp' => t('Scroll Up'),
    'scrollDown' => t('Scroll Down'),
    'scrollLeft' => t('Scroll Left'),
    'scrollRight' => t('Scroll Right'),
    'scrollHorz' => t('Scroll Horz'),
    'scrollVert' => t('Scroll Vert'),
    'shuffle' => t('Shuffle'),
    'slideX' => t('Slide X'),
    'slideY' => t('Slide Y'),
    'toss' => t('Toss'),
    'turnUp' => t('Turn Up'),
    'turnDown' => t('Turn Down'),
    'turnLeft' => t('Turn Left'),
    'turnRight' => t('Turn Right'),
    'uncover' => t('Uncover'),
    'wipe' => t('Wipe'),
    'zoom' => t('Zoom'),
  );

  return $_fx;
}

/**
 * Get images from a directory.
 *
 * @param $imagepath
 *   Path to the directoryory where the images are stored.
 * @param $order
 *   The order in which to return the images.
 * @return
 *   An array containing the filename of the images for the dynamic display block.
 */
function _ddblock_get_image_array($imagepath, $order, $max_image) {
  // only images jpg, jpeg,  gif, png
  $mask = '[a-zA-Z0-9\_\-\.]+\.(jpe?g|gif|png|JPE?G|GIF|PNG)$';
  // ignore the following files
  $ignore = array('.', '..', 'CVS');

  // Finds all files that match a given mask in a given directory, files which match the ignore variable are excluded.
  $file_array = file_scan_directory($imagepath, $mask, $ignore, $callback = 0, $recurse = FALSE, $key = 'filename', $min_depth = 0, $depth = 0);

  $file_names = array();
  foreach ($file_array as $value) {
    $file_names[] = $value->filename;
  }

  switch ($order) {
    case 'random':
      shuffle($file_names);
      break;
    case 'asc' :
      asort($file_names);
      break;
    case 'desc':
      rsort($file_names);
      break;
  }
  $file_names = array_slice($file_names, 0, $max_image);
  return $file_names;
}

/**
 * Get content from a content type for the dynamic display block.
 *
 * @param $content_type
 *   Content type to get the content from.
 * @param $nodes
 *   The nodes to return.
 * @return
 *   An array containing the teaser of nodes for the dynamic display block
 */
function _ddblock_get_content_array($content_type, $nodes) {

  $sql = "SELECT nid ".
         "FROM {node} ".
         "WHERE status = 1 ".
         "AND type = '%s' ".
         "AND nid = '%s' ";
  $results = db_query($sql, $content_type, $nodes);

  $selected_nodes = array();
  $i=0;
  while ($obj = db_fetch_object($results)) {
    $node = node_load($obj->nid);
    // show an HTML representation of the themed node teaser.by setting the third parameter to false and dont show links by seting the fourth parameter to FALSE.
    $selected_nodes[$i] = node_view($node, TRUE, FALSE, FALSE);
    $i++;
  }

  return $selected_nodes;
}

/**
 * Get node id's and titles of nodes of a content type.
 *
 * @param $content_type
 *   Content type to get the content from.
 * @return
 *   An array containing node id's and node titles.
 */
function _ddblock_get_content_type_nodes($content_type) {

  $sql = "SELECT nid ".
         "FROM {node} ".
         "WHERE status=1 ".
         "AND type='%s' ";
  $results = db_query($sql, $content_type);

  $selected_nodes = array();
  while ($obj = db_fetch_object($results)) {
    $node = node_load($obj->nid);
    $selected_nodes[$node->nid] = check_plain($node->title);
  }

  return $selected_nodes;
}

// AHAH CALLBACK FUNCTIONS

/**
 * AHAH callback to replace node select options.
 *
 * This function is called when the content type is changed.  It updates the
 * cached form (configure form) and returns rendered output to be used to
 * replace the select containing the possible nodes in the newly selected content-type.
 *
 * @param $build_id
 *   The form's build_id.
 * @param $ctid
 *   A content type id from among those in the form's content type select.
 * @return
 *   Prints the replacement HTML in JSON format.
 */
function ddblock_select_nodes_js() {
  // get the form_id to rebuild the form later.
  $form_id = $_POST['form_id'];

  // get field settings from the form.
  $content_type = $_POST['content_type'];
  $nodes = $_POST['content_nodes'];

  // get the form_build_id of the form to fetch the form from the cache_form table.
  $form_build_id = $_POST['form_build_id'];
  $form_state = array('submitted' => FALSE);

  // Fetch the form from cache.
  $form = form_get_cache($form_build_id, $form_state);

  // Get the new fields.
  ddblock_select_nodes_form($form, $content_type, $nodes);

  // Store the form back in the cache.
  form_set_cache($form_build_id, $form, $form_state);

  // Build and render the new select element, then return it in JSON format.
  $form_state = array();
  $form['#post'] = array();
  $form = form_builder($form_id, $form, $form_state);
  $output = drupal_render($form['content']['content_types']['content_type']);
  $output .= drupal_render($form['content']['content_types']['nodes']);
  $output .= drupal_render($form['content']['content_types']['select_nodes']);

  // Don't call drupal_json(). ahah.js uses an iframe and
  // the header output by drupal_json() causes problems in some browsers.
  print drupal_to_js(array('status' => TRUE, 'data' => $output));
  exit();
}
/**
 * AJAX callback to replace width and height fields.
 *
 * This function is called when the pager is changed.  It updates the
 * cached form (configure form) and returns rendered output to be used to
 * replace the width and height fields of the pager.
 *
 * @param $build_id
 *   The form's build_id.
 * @param $pager
 *   A pager for the dynamic display block.
 * @return
 *   Prints the replacement HTML in JSON format.
 */
function ddblock_pager_dimensions_js() {
  // get the form_id to rebuild the form later.
  $form_id = $_POST['form_id'];

  // get value of pager select from the form.
  $pager = $_POST['pager'];

  // get the form_build_id of the form to fetch the form from the cache_form table.
  $form_build_id = $_POST['form_build_id'];
  $form_state = array('submitted' => FALSE);

  // Fetch the form from cache.
  $form = form_get_cache($form_build_id, $form_state);

  // if pager <> none set default values.
  if ($pager <> 'none') {

    // Set default values for pager height and width.
    if ($pager == 'number-pager') {
      $pager_height = 25;
      $pager_width = 195;
    }
    else {
      $pager_height = 63;
      $pager_width = 195;
    }
  }

  // Get the new fields.
  ddblock_pager_dimensions_form($form, $pager, $pager_height, $pager_width);

  // Store the form back in the cache.
  form_set_cache($form_build_id, $form, $form_state);

  // Build and render the new select element, then return it in JSON format.
  $form_state = array();
  $form['#post'] = array();
  $form = form_builder($form_id, $form, $form_state);
  $output = drupal_render($form['block_settings']['settings']['pager_height']);
  $output .= drupal_render($form['block_settings']['settings']['pager_width']);

  // Don't call drupal_json(). ahah.js uses an iframe and
  // the header output by drupal_json() causes problems in some browsers.
  print drupal_to_js(array('status' => TRUE, 'data' => $output));
  exit();
}

/**
 * ddblock instances.
 *
 * Gives an overview of all dynamic display blocks instances to manage and to add a dynamic display block instance.
 */
function ddblock_instances() {

  // Fetch "Add Instance" form.
  $form = drupal_get_form('ddblock_add_instance_form');

  // Get an array of existing block instances.
  $block_instances = ddblock_get_block_instances(NULL, TRUE);

  // theme the instances form.
  return theme('ddblock_add_instance', $form, $block_instances);
}


/**
 * form to add a dynamic display block instance.
 */
function ddblock_add_instance_form($form_state) {
  $form = array();
  $form['title'] = array(
    '#type' => 'textfield',
    '#title' => t('Instance Title'),
    '#maxlength' => 256,
    '#required' => TRUE,
  );

  // Turn $blocks into form options of block types.
  $options = array();

  //get possible content types from settings.
  $block_types = variable_get('ddblock_blocks', array());
  foreach ($block_types as $value ) {
    if ($value) {

      //$option[0]  contains module name, $option[1]  contains delta, $option[2]  contains block title,
      $option = explode('_', $value);
      $options[$option[0] .'_'. $option[1]] = $option[0] .' - '. $option[2];
    }
  }

  $form['block'] = array(
    '#type' => 'select',
    '#title' => t('Block type'),
    '#options' => $options,
    '#required' => TRUE,
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Add Instance'),
  );

  return $form;
}

/**
 * Return all or one dynamic display block instances.
 *
 * @param $delta
 *   Optional. Retreive a single block based on this delta. If none specified,
 *   all blocks are returned.
 * @param $reset
 *   Optional. Boolean value to reset the interal cache of this function.
 * @return
 *   array of dynamic display block.
 */
function ddblock_get_block_instances($delta = NULL, $reset = FALSE) {
  static $block_instances;

  if (!isset($block_instances) || $reset) {
    $block_instances = array();
    $result = db_query("SELECT * FROM {ddblock_block} where enabled = 1");
    while ($block_instance = db_fetch_object($result)) {
      $block_instances[$block_instance->delta] = $block_instance;
    }
  }

  return is_numeric($delta) ? $block_instances[$delta] : $block_instances;
}

/**
 * Add block instance to database from add_instance_form.
 */
function ddblock_add_instance_form_submit($form, &$form_state) {

  // Get the original block info.
  $original_block = explode('_', $form_state['values']['block']);
  // Create new delta for block instance.
  $sql = "INSERT INTO {ddblock_block}
          (title, module, delta_original, enabled)
          VALUES ('%s', '%s', '%s', %d)";
  $result = db_query($sql,
    $form_state['values']['title'], // new title of the block.
    $original_block[0], // original module.
    $original_block[1], // original delta.
    1 // is now ddblock enabled.
  );
}


/**
 * Get title of a block by its module and delta.
 */
function ddblock_get_block_title($module, $delta) {
  $blocks = module_invoke($module, 'block', 'list');
  $title = $blocks[$delta]['info'];
  return $title;
}

/**
 * Get the blocks which are enabled in the settings page of the dynamic display block module.
 */
function ddblock_get_ddblock_enabled_module_blocks() {

  // get the saved block types which can be used as ddblock instances.
  $block_types = variable_get('ddblock_blocks', array());

  // put the block types in an array.
  $blocks = array();
  $i = 0;
  foreach ($block_types as $value ) {
    if ($value) {
      //$option[0]  contains module name, $option[1]  contains delta, $option[2]  contains block title.
      $option = explode('_', $value);
      $blocks[$i]['module'] = $option[0];
      $blocks[$i]['delta'] = $option[1];
      $i++;
    }
  }

  return $blocks;
}

/**
 * Theme function for the "Block Instances" page.
 */
function theme_ddblock_add_instance($add_block_form, $block_instances) {

  $output = '';
  $header = array(
    t('Title'),
    t('Original Module'),
    t('Original Block Title'),
  );
  $rows = array();
  if (!empty($block_instances)) {
    foreach ($block_instances as $row) {
      $title = ddblock_get_block_title($row->module, $row->delta_original);
      $rows[] = array(
        check_plain($row->title),
        $row->module,
        $title,
      );
    }
  }

  $output .= '<p><h3>'. t('Manage Instances') .'</h3>'. theme('table', $header, $rows) .'</p>';

  $output .= '<p><h3>'. t('Add Instance') .'</h3>'. $add_block_form .'</p>';
  return $output;
}

/**
 * Custom sort based on info element of array.
 */
function ddblock_block_sort($a, $b) {
  return strcmp($a['module'] . $a['info'], $b['module'] . $b['info']);
}